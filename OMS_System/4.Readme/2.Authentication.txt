1. Custom Identify theo mô hình MVC
1.1 Create Identity Controller
- After scaffold Identity. The Identity folder is automatically generated in Areas/Identity/Account Folder. The main files are
+ Pages/_ValidationScriptsPartial.cshtml: The partial use to jquery lib to validate data before binding.
+ Pages/_ViewStart.cshtml: The first code is ran when the code start.
+ Page/_ViewImports.cshtml. RazorPage use to inport the specific namespace use in Razor page
+ Page/Error.cshtml

Pages/Account/
_StatusMessage.cshtml: Partial is used to pass MessageStatus to other Razor Pages
_ViewImports.cshtml: 
+ Register: Use to register user account ( userid/ password) or external register
+ RegisterConfirmation: The page use to confirm the email that user registered new account
+ Login: Login page
+ LoginWith2Fa: Two factor confirmation page
+ LoginWithRecoveryCode
+ ExternalLogin
+ Logout
+ ConfirmEmail
+ ConfirmEmailChange
+ ResendEmailConfirmation
+ ForgotPassword
+ ForgotPasswordConfirmation
+ ResetPassword
+ ResetPasswordConfirmation
+ Lockout

Pages/Account/Manager/
_Layout
_ManagerNav
_StatusMessage
_ViewImports
+ ChangePassword
+ DeletePersonData
+ Disable2fa
+ DownloadPersonData
+ Email
+ EnableAuthenticator
+ ExternalLogins
+ GenerateRecoveryCodes
+ Index
+ PersonalData
+ ResetAuthentication
+ SetPassword
+ ShowRecoveryCode
+ TwoFactorAuthentication
+ ManagerNavPage

1. Custorm Identity Controller
- Custom Account
- Custom Manager
2. Custom View
- Account Folder
- Manager Folder
3. Add External login.
- Facebook
- Google
- QR code
3.1 Facebook login
- Add the Microsoft.AspNetCore.Authentication.Facebook NuGet package to the project
- Access via: https://developers.facebook.com/apps/ 
- Get AppId and Secret 
- Store the Facebook app ID and secret
. Store sensitive settings such as the Facebook app ID and secret values with Secret Manager. For this sample, use the following steps:
1. Initialize the project for secret storage per the instructions: dotnet user-secrets init
2. Store the sensitive settings in the local secret store with the secret keys:
dotnet user-secrets set "Authentication:Facebook:AppId" "<app-id>"
dotnet user-secrets set "Authentication:Facebook:AppSecret" "<app-secret>"
- Declare AppId and AppSecret on appsetings.json files
 "Authentication":{
    "Facebook":{
      "AppId":"549405628069282",
      "AppSecrete":"ca51fec585b392d4e2d4743d5d9fea1c"
    }
- Config facebook Authentication
builder.Services.AddAuthentication().AddFacebook(facebookOptions=>{
    facebookOptions.AppId=builder.Configuration["Authentication:Facebook:AppId"];
    facebookOptions.AppSecret=builder.Configuration["Authentication:Facebook:AppSecret"];
    facebookOptions.CallbackPath="/dang-nhap-tu-facebook";
    facebookOptions.AccessDeniedPath="/Account/Login";
};
- External login process: Login -> (post) External Login -> (create external login: AppId, App secrete) Face/Google login -> ( callback: get: provider info): Login/ Confirm Account/Create account
- Create External account: (post) Confirmation  -> create user -> add user to login -> confirm -> Login
3.2 Google Login
Create the Google OAuth 2.0 Client ID and secret
- Add the Microsoft.AspNetCore.Authentication.Google NuGet package to the project
- Access via: https://console.cloud.google.com/apis/dashboard?inv=1&invt=AbrSsA&project=appwe-444810
- Get ClientId and ClientSecret 
- Store the Google app ID and secret
- Store the sensitive settings such as the ClientId and ClientSecret value with secret manager: Following the steps:
1. Initialize the secret storage of project: 
dotnet user-secrets init
2. Set sensitive settings 
dotnet user-secrets set "Authentication:Google:ClientId" "<ClientId value>"
dotnet user-secrets set "Authentication:Google:ClientSecret" "<ClientSecret value>"
 Declare AppId and AppSecret on appsetings.json files
 "Authentication":{
    "Google":{
      "ClientId":"",
      "ClientSecrete":""
    }
- Config appsetings.json
.AddGoogle(googleOptions=>{
    googleOptions.ClientId=builder.Configuration["Authentication:Google:ClientId"];
    googleOptions.ClientSecret=builder.Configuration["Authentication:Google:ClientSecret"];
    googleOptions.CallbackPath="/dang-nhap-tu-google";
    googleOptions.AccessDeniedPath="/Account/Login";
});