Summary:
+ Tạo Model Product
+ Xây dựng controller hiển thị sản phẩm
+ Kích hoạt section
+ Xây dựng cấu trúc dữ liệu Cart
+ Thêm mặt hàng vào Cart
+ Trang hiển thị Cart
+ Tạo cartPartial, giỏ hàng ở menu

1. Tạo model Product
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace OMS_App.MODels
{
    [Table("Product")]
    public class Product
    {
        [Key]
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public double Price { get; set; }
    }
}
- Update table vào DBContext
using Microsoft.EntityFrameworkCore;

using OMS_App.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using OMS_App.Areas.Post.Models;
namespace OMS_App.Data
{
    public class OMSDBContext : IdentityDbContext<AppUser>
    {

        public DbSet<AppUser> AppUsers { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Post> Posts { get; set; }
        public DbSet<PostCategory> PostCategories { get; set; }
        public DbSet<Product> Products { get; set; }
        public OMSDBContext(DbContextOptions<OMSDBContext> options) : base(options) { }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // remove pre-fix AspNet
            foreach (var entityType in modelBuilder.Model.GetEntityTypes())
            {
                var nameTable = entityType.Name;
                if (nameTable.StartsWith("AspNet"))
                {
                    entityType.SetTableName(nameTable.Substring(6));
                }
            }

            // Đánh chỉ mục cho Categor 
            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasIndex(p => p.Slug);
            });
            // Tạo mối quan hệ many -many between Post and Category bằng việc tạo key cho bảng bằng việc kết hợp PostId và CategoryId
            modelBuilder.Entity<PostCategory>().HasKey(p => new { p.PostId, p.CategoryId });

            /// Thực hiện trèn 4 sản phẩm vào bảng khi bảng Product được tạo
            modelBuilder.Entry<Product>().HasData(
               new Product()
               {
                   ProductId = 1,
                   Name = "Đá phong thuỷ tự nhiên",
                   Description = "Số 1 cao 40cm rộng 20cm dày 20cm màu xanh lá cây đậm",
                   Price = 1000000
               },
                new Product()
                {
                    ProductId = 2,
                    Name = "Đèn đá muối hình tròn",
                    Description = "Trang trí trong nhà Chất liệu : • Đá muối",
                    Price = 1500000
                },
                new Product()
                {
                    ProductId = 3,
                    Name = "Tranh sơn mài",
                    Description = "Tranh sơn mài loại nhỏ 15x 15 giá 50.000",
                    Price = 50000
                },
                new Product()
                {
                    ProductId = 4,
                    Name = "Tranh sơn dầu - Ngựa",
                    Description = "Nguyên liệu thể hiện :    Sơn dầu",
                    Price = 450000
                }
            );
        }
    }
}
- Thực hiện tạo migrations và update database update
dotnet ef migrations add AddProductModel
dotnet ef database update
2. Thực hiện tạo controller hiển thị danh sách sản phẩm
- Xây dựng một controller dùng để hiển thị tất cả các Product/ thêm product vào cart
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

using OMS_App.Data;
using OMS_App.Models;
using Microsoft.EntityFrameworkCore;
[Route("/product/")]
public class ProductController : Controller
{
    private readonly ILogger<ProductController> _logger;
    private readonly OMSDBContext _context;
    private IMemoryCache _cache;
    // Số bài viết hiển thị trên một trang danh mục
    public const int ITEM_PER_PAGE = 4;
    public ProductController(ILogger<ProductController> logger, OMSDBContext context, IMemoryCache cache)
    {
        _logger = logger;
        _context = context;
        _cache = cache;
    }


    public async Task<IActionResult> Index()
    {
        var products = await _context.Products.TolistAsync();
        return View(products)

    }
}

- Trang View/product/Index.cshtml
@using OMS_App.Models

@model List<Product>;
@{

    Layout = "_Layout";

    ViewData["Title"] = "Các sản phẩm ";

}
<div class="card-columns">
    @foreach (var product in Model)
    {
        <div class="card">
            <h3 class="card-header">@product.Name</h3>
            <div class="card-body" style="height:150px">@product.Description</div>
            <div class="card-footer">
                <span class="text-muted">@(product.Price.Tostring("n0")) VND</span>
                <a asp-route="addcart" asp-route-productid="@product.ProductId"
                    class="btn btn-secondary btn-sm float-right">
                    Order
                </a>
            </div>
        </div>
    }
</div>
- Thêm các phương thức để làm việc với cart như:
+ Thêm Item vào cart: AddToCart()
+ Hiển thị các sản phẩm trong cart: Cart()
+ Xoá item trong cart: DeleteFromCart()
+ Update item trong cart: UpdateCart()
+ Thực hiện thanh toán: Checkout()
3. Kích hoạt session trong Asp.AspNet
Để xây dựng chức năng giỏ hàng, danh sách các mặt hàng sẽ lưu trong Session của hệ thống. Do vậy, ứng dụng cần đảm bảo kích hoạt Session - làm theo hướng dẫn tại Sử dụng Session trong ASP.NET , đồng thời cũng dùng kỹ thuật JSON để lưu dữ liệu nên cần đảm bảo tích hợp hai gói là:
dotnet add package Newtonsoft.Json
dotnet add package Microsoft.AspNetCore.Session
dotnet add package Microsoft.Extensions.Caching.Memory
Thêm vảo Program.cs
builder.Services.AddDistributedMemoryCache();           // Đăng ký dịch vụ lưu cache trong bộ nhớ (Session sẽ sử dụng nó)
builder.Services.AddSession(cfg => {                    // Đăng ký dịch vụ Session
    cfg.Cookie.Name = "Tuyen99it";             // Đặt tên Session - tên này sử dụng ở Browser (Cookie)
    cfg.IdleTimeout = new TimeSpan(0,30, 0);    // Thời gian tồn tại của Session
});
- Sử dụng Session Middleware trong pipeline,  cho thêm vào (sau UseStaticFiles()):
app.UseSession();
- Các kiến thức cơ bản để làm việc với session
Trong Controller, Session được truy cập thông qua giao diện ISession, giao diện này lấy được bằng thuộc tính HttpContext.Session
var session = HttpContext.Session;
Các mục lưu trong session dưới dạng key/value. Bạn có thể đọc và lưu một chuỗi vào session bằng phương thức GetString(key, value) và SetString(key, value). Tuy hai phương thức này là mở rộng của ISession nên cần có using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http;
/...

    var session = HttpContext.Session;
    string valueString = session.GetString ("key");

    session.SetString("yourkey", "yourstring");
Thư viện Newtonsoft.Json giúp làm việc với JSON, ở đây cần nhớ hai chức năng. Chuyển một đối tượng thành chuỗi json và ngược lại phục hồi đối tượng từ chuỗi json
Để chuyển một đối tượng (thuộc tính đối tượng) thành chuỗi json dùng SerializeObject
string jsonstring =  JsonConvert.SerializeObject(ob);
Để chuyển chuỗi json thành đối tượng dùng DeserializeObject<ObjectClas>
Type obj = JsonConvert.DeserializeObject<Type>(jsonstring);
4. Xây dựng cấu trúc cart
- Tạo CartItem Model: Models/CartItem.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace OMS_App.Models
{

    public class CartItem
    {
        public int Quality { get; set; }
        public Product Product { get; set; }
    }
}
- Xây dựn các chức năng làm việc với cart trong controller: ProductController : Controller 
 // Key lưu chuỗi json của Cart
    public const string CARTKEY = "cart";

    // Lấy cart từ Session (danh sách CartItem)
    List<CartItem> GetCartItems () {

        var session = HttpContext.Session;
        string jsoncart = session.GetString (CARTKEY);
        if (jsoncart != null) {
            return JsonConvert.DeserializeObject<List<CartItem>> (jsoncart);
        }
        return new List<CartItem> ();
    }

    // Xóa cart khỏi session
    void ClearCart () {
        var session = HttpContext.Session;
        session.Remove (CARTKEY);
    }

    // Lưu Cart (Danh sách CartItem) vào session
    void SaveCartSession (List<CartItem> ls) {
        var session = HttpContext.Session;
        string jsoncart = JsonConvert.SerializeObject (ls);
        session.SetString (CARTKEY, jsoncart);
    }
    5. Xây dựng chức năng thêm mặt hàng vào cart
    Khi người dùng bấm vào Đặt hàng ở danh sách sản phẩm, thì nó sẽ chuyển đến Action AddToCart, có chức năng đưa sản phẩm đó vào Cart. Xây dựng Action đó như sau:
    /// Thêm sản phẩm vào cart
[Route ("addcart/{productid:int}", Name = "addcart")]
public IActionResult AddToCart ([FromRoute] int productid) {

    var product = _context.Products
        .Where (p => p.ProductId == productid)
        .FirstOrDefault ();
    if (product == null)
        return NotFound ("Không có sản phẩm");

    // Xử lý đưa vào Cart ...
    var cart = GetCartItems ();
    var cartitem = cart.Find (p => p.product.ProductId == productid);
    if (cartitem != null) {
        // Đã tồn tại, tăng thêm 1
        cartitem.quantity++;
    } else {
        //  Thêm mới
        cart.Add (new CartItem () { quantity = 1, product = product });
    }

    // Lưu cart vào Session
    SaveCartSession (cart);
    // Chuyển đến trang hiện thị Cart
    return RedirectToAction (nameof (Cart));
}
6. Trang hiện thị Cart
Tương ứng với action Cart
// Hiện thị giỏ hàng
[Route ("/cart", Name = "cart")]
public IActionResult Cart () {
    return View (GetCartItems());
}
@using OMS_App.Models

@model List<CartItem>;
@{

    Layout = "_Layout";

    ViewData["Title"] = "Cart ";

}
<h2> Giỏ hàng</h2>
@if (Model.Count > 0) {
  decimal total = 0;
  int stt = 1;
  
  <table class="table">
    <tr>
      <th>#</th>
      <th>Sản phẩm</th>
      <th>Giá</th>
      <th>Số lượng</th>
      <th>Thành tiền</th>
      <th></th>
    </tr>
    @foreach (var cartitem in Model)
    {
        var thanhtien = cartitem.Quantity * cartitem.Product.Price;
        total += (decimal)thanhtien;

        <tr>
           <td>@(stt++)</td>
           <td>@cartitem.Product.Name</td>
           <td>@(cartitem.Product.Price.ToString("n0"))</td>
           <td><input asp-for="@cartitem.Quantity" id="@($"quantity-{cartitem.Product.ProductId}")"/></td>
           <td>@(thanhtien.ToString("n0"))</td>
           <td>
              <button class="btn btn-success updatecartitem" 
                    data-productid="@cartitem.Product.ProductId">Cập nhật</button>
              <a asp-route="removecart" asp-route-ProductId="@cartitem.Product.ProductId"
                class="btn btn-danger">Xóa</a>
           </td>
        </tr>
    }
      <tr>
          <td colspan="4" class="text-right">Tổng tiền</td>
          <td>@(total.ToString("n0"))</td>
          <td></td>
      </tr>
  </table>

  <a asp-controller="ProductController" asp-action="Checkout" class="btn btn-success">Gửi đơn hàng</a>

      @section Scripts {
        <script>
          $(document).ready(function () {
              $(".updatecartitem").click(function (event) {
                  event.preventDefault();
                  var ProductId = $(this).attr("data-productid");
                  var quantity = $("#quantity-" + ProductId).val();
                  $.ajax({
                      type: "POST",
                      url:"@Url.RouteUrl("updatecart")",
                      data: {
                          productid: Productid,
                          quantity:quantity
                      },
                      success: function (result) {
                          window.location.href = "@Url.RouteUrl("cart")";
                      }
                  });
              });
          });
        </script>
      }

}
else {
  <p class="alert alert-danger">Giỏ hàng trống</p>
}
Trong đó đoạn mã tại section Script là JQuery - để cập nhật lại số lượng của một mặt hàng nào đó. Người dùng điền số lượng mới và bấm vào cập nhật. Khi bấm vào cập nhật sẽ sử dụng Ajax gửi (post) dữ liệu là ProductId và số lượng tương ứng đến Action UpdateCart, nội dung Action này như sau
 // Cập nhật Cart thay đổi số lượng quantity ...
    var cart = GetCartItems ();
    var cartitem = cart.Find (p => p.product.ProductId == productid);
    if (cartitem != null) {
        // Đã tồn tại, tăng thêm 1
        cartitem.quantity = quantity;
    }
    SaveCartSession (cart);
    // Trả về mã thành công (không có nội dung gì - chỉ để Ajax gọi)
    return Ok();
Tương tự action RemoveCart có chức năng xóa một sản phẩm khỏi Cart, xây dựng nó như sau
/// xóa item trong cart
[Route ("/removecart/{productid:int}", Name = "removecart")]
public IActionResult RemoveCart ([FromRoute] int productid) {
    var cart = GetCartItems ();
    var cartitem = cart.Find (p => p.product.ProductId == productid);
    if (cartitem != null) {
        // Đã tồn tại, tăng thêm 1
        cart.Remove(cartitem);
    }

    SaveCartSession (cart);
    return RedirectToAction (nameof (Cart));
}
7. Tạo Partial hiện thị giỏ hàng ở menu
Tạo ra partial _CartPartial.cshtml để hiện thị giỏ hàng trên menu như sau:
Views/Shared/_CartPartial.cshtml
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@inject IHttpContextAccessor HttpContextAccessor


@{
    var session = HttpContextAccessor.HttpContext.Session;
    string jsoncart = session.GetString (OMS_App.Controllers.ProductController.CARTKEY);
    if (jsoncart != null) {
        var cart = JsonConvert.DeserializeObject<List<CartItem>> (jsoncart);
        <div class="nav-item"><a asp-route="cart">Giỏ hàng(@cart.Count)</a></div>
         
    }
}
Trong Code trên truy cập Session từ View, do đó phải Inject IHttpContextAccessor.

Mở layout ra, chèn đoạn mã để render partial này tại menu
@await Html.PartialAsync("_CartPartial")

