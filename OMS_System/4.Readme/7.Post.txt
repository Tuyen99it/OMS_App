Summary:
+ Create a Model to illustrate a Post
+ Create CRUD for Post
+ Post have  many-many relationship with category.
1. Create a Post Model
+ Post properties:
. id
. Title
. Description
. Content
. Slug
. Published
. PostCategory
1.1 Xây dựng Post Model
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using OMS_App.Models;
namespace OMS_App.Areas.Post.Models
{
    public class PostBase
    {
        [Key]
        public int Id { get; set; }
        [Required(ErrorMessage ="Please enter the post title")]
        [Display(Name ="Tiêu đề")]
        [StringLength(160,MinimumLength =3,ErrorMessage ="{0} dài từ {1} đến {2}")]
        public string Title { get; set; }
        [Display(Name = "Mô tả ngắn")]
        public string Description { get; set; }
        [Display(Name ="Chuỗi định danh (url)",Prompt ="Nhập hoặc để trống sẽ tự phát sinh theo tiêu đề")]
        [Required(ErrorMessage ="Phải thiết lập địa chỉ url")]
        [StringLength(160,MinimumLength =3,ErrorMessage ="{0} dài từ {1} đến {2}")]
        [RegularExpression(@"^[a-z0-9-]*$", ErrorMessage = "Chỉ dùng các ký tự [a-z0-9-]")]
        public string Slug {get;set;}
        [Display(Name ="Nội dung")]
        public string Content {get;set;}
        [Display(Name = "Xuất bản")]
        public bool Published {get;set;}
        public List<PostCategory>PostCategories {get;set;}
    }
    // Model Post
    [Table("Post")]
    public class Post: PostBase{
        [Required]
        [Display(Name ="Tác giả")]
        public string AuthorId {get;set;}
        [ForeignKey("AuthorId")]
        [Display(Name ="Tác giả")]

        public AppUser Author {get;set;}
        [Display(Name ="Ngày tạo")]
        public DateTime DateCreated{get;set;}
        [Display(Name ="Ngày cập nhật")]
        public DateTime DateUpdated {get;set;}

    }
}
- Mối quan hệ giữa Post và Author là mối quan hệ một tác giả, nhiều bải post. Do trong Post sử dụng author Id. Từ đó ta có thể lẩy ra được thông tin của Author.
- Để tạo mối quan hệ một bài post thuộc nhiều category hoặc một category có nhiều posts. Ta xây dựng mối quan hệ nhiều nhiều giữa post và category
- Để tạo mối quan hệ nhiều nhiều, ta sử dụng bảng trung gian là PostCategory
   public class PostCategory {
        public int PostId {get;set;}
        public int CategoryId {get;set;}
        [ForeignKey("PostId")]
        public Post Post{get;set;}
        [ForeignKey("CategoryId")]
        public Category Category {get;set;}
    }
1.2 Up to date into AppDbContext
        public DbSet<AppUser> AppUsers { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Post> Posts {get;set;}
        public DbSet<PostCategory> PostCategories {get;set;}
- Tạo key cho bảng  PostCategory là sự kết hợp giữa PostId và CategoryId, Từ đó tạo ra mối quan hệ many - many giữa Post và Category
builderModel.Entiry<PostCategory>().HasKey(p=>new {p.PostId,p.CategoryId});
1.3 Create migration and update database
- dotnet ef migrations add AddPost
- dotnet ef database update
2. Create CRUD cho Post
- Phát sinh code CRUD cho Post Model
